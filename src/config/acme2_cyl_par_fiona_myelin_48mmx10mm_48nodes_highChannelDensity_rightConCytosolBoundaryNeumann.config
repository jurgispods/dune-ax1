[general]
#outputDir = /import/m1/jpods/dune-ax1/myelin_48mmx10mm_50nodes_highChannelDensity_rightConCytosolBoundaryNeumann
outputDir = out-myelin_48mm
vtkOutput = no
vtkSubSamplingLevel = 0
fullGnuplotOutput = no
hdf5Output = yes
diagnosticsFile = diagnostics.dat
outputTimeInterval = 1.0
# This flag simply loads a state
loadState = yes
doExtrapolateXData = yes
# ymax = 1e6
#loadGridFileName = simulation_states/hackepeter/acme2_cyl_par_myelin_test_EQUILIBRIUM.dgf
# ymax = 10e6
loadGridFileName = simulation_states/hackepeter/acme2_cyl_par_myelin_y10e6_EQUILIBRIUM.dgf
#loadGridFileName = complete_real_equilibrium_y10e6.dgf
# This flag tells to continue the history of the last simulation, i.e. existing 
# data files in the output dir are not cleared, new data is simply appended; 
# if false previous history is 'forgotten'
continueSimulation = no
#loadFilename = simulation_states/hackepeter/acme2_cyl_par_myelin_test_EQUILIBRIUM.dat
loadFilename = simulation_states/hackepeter/acme2_cyl_par_myelin_y10e6_EQUILIBRIUM.dat
#loadFilename = complete_real_equilibrium_y10e6.dat
saveState = yes
saveFilename = simulation_states/hackepeter/acme2_cyl_par_myelin_48mmx10mm.dat
doCheckpointing = yes
checkpointInterval = 20
createGridFile = yes
saveGridFileName = acme2_cyl_par_myelin_48mmx10mm.dgf
loadChannelStates = no

rootOutputNode = 0
outputRootNodeOnly = yes
printMatrix = no
printRhs = no
printResidual = no
useRowNormPreconditioner = no

#configName = myelin
configName = default
refineXDirection = no
refineYDirectionGeometrically = yes
# radial cylinder refinement compensates for increasing volumes in y-direction
useRadialCylinderRefinement = no
# Start coordinate of radial refinement
radialCylinderRefinementStart = 15.0e3
# Shall there be an interval of smooth geometric refinement between membrane and
# the beginning of the radial cylinder refinement (radialCylinderRefinementStart)?
transitionIntervalGeometricRefinement = yes
# If not, use nElementsTransitionInterval equidistant elements instead
nElementsTransitionInterval = 20;
# Desired max. ratio between two extracellular cell volumes
max_volume_ratio = 1.e3
# Max. number of points to use in radialCylinderRefinement
max_radial_points = 100
useMembrane = yes
numberMembranes = 1
refineMembrane = yes
nMembraneElements = 1
mV_output = yes
gammaPot = 1.0
gammaCon = 1.0
# one of {step, squarePulse, trianglePulse, smoothStep}
#initConc = default
adaptiveTimeStep = yes
timeStepLowerLimitNewtonIt = 10
timeStepUpperLimitNewtonIt = 30
maxTimeStep = 0.01e-3
minTimeStep = 0.05e-6
maxTimeStepAP = 0.01e-3
newtonReduction = 5e-6
newtonAbsLimit = 100.
newtonMaxIt = 50
newtonMinLinReduction = 1e-2
maxNumberNewtonRestarts = 2
linearSolverMaxIt = 1000
doReorderMatrix = no
# Volume scaling assigns a scaling factor to each DOF, compensating for increasing
# cell volumes algebraically. This is used as a replacement for radial refinement!
doVolumeScaling = yes
#volumeScalingYThreshold = -1

cellWidth = 500.
y_memb = 500.
d_memb = 5.
xmax = 48.e6
ymax = 10.e6

#dx = 10.e6
dx = 10.e3
# dy only takes effect when logarithmic grid is chosen, otherwise dx is determined by the level
dy = 100.e3
dy_cell = 100.
dy_min = 0.5

closedCell = yes

# Initialize channels to the current membrane potential
automaticChannelInitialization = yes
# Value to use if no automatic initialization is desired
channelRestingPotential = -65.

# This factor scales the membrane flux. Only used for speedup of equilibration phase!
dummy_value = 10

[boundary]
[boundary.concentration]
top = Dirichlet
bottom = Neumann
leftCytosol = Neumann
rightCytosol = Neumann
leftExtracellular = Neumann
rightExtracellular = Neumann

[boundary.potential]
top = Dirichlet
bottom = Neumann
leftCytosol = Neumann
rightCytosol = Neumann
leftExtracellular = Neumann
rightExtracellular = Neumann

[equilibration]
doEquilibration = no
# This forces the equilibration calculation, even with more than one element in x-direction
forceEquilibration = yes
# time parameters; tEquilibration must be a multiple of dtEquilibrium!
tEquilibrium = 100.0e3
dtEquilibrium = 1.0

# leak ratios for resting potential generation; sum must be 1!
#Na_leak = 0.09
#K_leak = 0.91
Na_leak = 0.13
K_leak = 0.87


[stimulation]
stimulation = yes
position_x = 500.e3
position_y = 0.
t_inj_start = 20.0
t_inj_end = 3.0e3
# multiply by elementary charge e to get the current in Amps
#I_inj = 1.0e8
I_inj = 1.1e11


# Ion concentrations for the solutions
[solution_in]
# "1" : real concentrations
#Na = 12.
#K  = 155.
#Cl = 167.
#Cl = 167.02651
Na =  12.
K =  125.
Cl = 137.

[solution_ex]
# "1" : real concentrations
#Na = 145.
#K  = 4.
#Cl = 149.
Na = 100.
K =  4.
Cl = 104.

# Channel densities for membrane groups
[membrane]
isActive = yes
# This is important: Choose this group for x intervals with unspecified membrane groups
defaultGroup = myelin
#defaultGroup = node_of_ranvier
useMultipleGroups = yes
# This only has an effect when membrane groups are resolved fine enough
smoothPermittivities = yes
loadMultipleStates = yes
interpolateMultipleStates = no

[membrane.node_of_ranvier]
start = 500.e3
width = 1.e3
stride = 1000.e3

#loadFilename = simulation_states/hackepeter/acme2_cyl_par_test_EQUILIBRIUM.dat
loadFilename = simulation_states/hackepeter/acme2_cyl_par_y10e6_EQUILIBRIUM.dat
#loadFilename = node_real_equilibrium_y10e6.dat

permittivity = 2.
#permittivity = 6.
#d_memb = 500.

dx = 100.
smoothTransition = no

# Units for the conductances are [mS/cm^2]
leak   = 0.5
Nav    = 1200.
Kv     =  360.

[membrane.myelin]
#loadFilename = simulation_states/hackepeter/acme2_cyl_par_myelin_test_EQUILIBRIUM.dat
loadFilename = simulation_states/hackepeter/acme2_cyl_par_myelin_y10e6_EQUILIBRIUM.dat
#loadFilename = myelin_real_equilibrium_y10e6.dat

permittivity = 6.
d_memb = 500.
smoothTransition = yes
geometricRefinement = yes
dx_transition = 100.
n_transition = 10

leak   = 0.0
Nav    = 0.0
Kv     = 0.0

#[membrane.soma]
#Na-Traub     = 100.
#Ca-Traub     = 1.0
#K(DR)-Traub  = 135.
#K(AHP)-Traub = 0.8
#K(C)-Traub   = 20.
#K(A)-Traub   = 0.5
#HH-K = 10.

#[membrane.apical]
#HH-Na = 0.
#HH-K = 0.

