[general]
outputDir = out-acme2_equilibrium_DUMMY
vtkOutput = no
fullGnuplotOutput = no
vtkSubSamplingLevel = 0
diagnosticsFile = diagnostics.dat
outputTimeInterval = 1.0
# This flag simply loads a state
loadState = yes
doExtrapolateXData = no
loadGridFileName = simulation_states/hackepeter/acme2_1membrane_EQUILIBRIUM.dgf
# This flag tells to continue the history of the last simulation, i.e. existing data files in the output dir
# are not cleared, new data is simply appended; if false previous history is 'forgotten'
continueSimulation = yes
#loadFilename = simulation_states/equilibrium/2d/2_membranes/height10000.dat
loadFilename = simulation_states/hackepeter/acme2_1membrane_EQUILIBRIUM.dat
saveState = yes
saveFilename = simulation_states/hackepeter/acme2_1membrane.dat
doCheckpointing = yes
checkpointInterval = 100
createGridFile = yes
saveGridFileName = acme2_1membrane_equilibrium.dgf

printMatrix = no
printRhs = no
useRowNormPreconditioner = no

configName = default
refineXDirection = no
refineYDirectionGeometrically = yes
useMembrane = yes
numberMembranes = 1
refineMembrane = no
mV_output = yes
gammaPot = 1.0
gammaCon = 1.0
# one of {step, squarePulse, trianglePulse, smoothStep}
#initConc = default
adaptiveTimeStep = yes
maxNumberNewtonRestarts = 3
doReorderMatrix = no

cellWidth = 100.
y_memb = 10.
d_memb = 5.
xmax = 1000.
ymax = 20.

dx = 1000.
# dy only takes effect when logarithmic grid is chosen, otherwise dx is determined by the level
dy = 0.02
dy_min = 0.02

# This seals the cell with Neumann-0 everywhere; choose 'no' if you want the lower cytosol boundary
# (present in the 1-membrane case only) to be Dirichlet-bulk
closedCell = yes
1memb_upperBoundary = Neumann
1memb_lowerBoundary = Neumann

# This factor scales the membrane flux. Only used for speedup of equilibration phase!
dummy_value = 10

[equilibration]
# If this flag is NOT set and there is only one membrane, the bottom condition is Neumann-0; Dirichlet otherwise!
doEquilibration = no
# time parameters; tEquilibration must be a multiple of dtEquilibrium!
tEquilibrium = 50.0e3
dtEquilibrium = 10.0

# leak ratios for resting potential generation; sum must be 1!
#Na_leak = 0.09
#K_leak = 0.91
Na_leak = 0.13
K_leak = 0.87


[stimulation]
stimulation = no
position_x = 25.
position_y = 0.
t_inj_start =   1020.0
t_inj_end =   3.0e3
# multiply by elementary charge e to get the current in Amps
#I_inj = 1.0e8
I_inj = 1.0e9


# Ion concentrations for the solutions
[solution_in]
# "1" : real concentrations
#Na = 12.
#K  = 155.
#Cl = 167.
#Cl = 167.02651
Na =  12.
K =  125.
Cl = 137.

[solution_ex]
# "1" : real concentrations
#Na = 145.
#K  = 4.
#Cl = 149.
Na = 100.
K =  4.
Cl = 104.

# Channel densities for membrane groups
[membrane]
isActive = yes

[membrane.axon]
leak   = 0.5
Nav    = 120.
Kv    =  36.

#[membrane.soma]
#Na-Traub     = 100.
#Ca-Traub     = 1.0
#K(DR)-Traub  = 135.
#K(AHP)-Traub = 0.8
#K(C)-Traub   = 20.
#K(A)-Traub   = 0.5
#HH-K = 10.

#[membrane.apical]
#HH-Na = 0.
#HH-K = 0.

