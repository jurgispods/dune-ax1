[general]
outputDir = out-acme2_cyl_par_laplace2
vtkOutput = no
vtkSubSamplingLevel = 0
fullGnuplotOutput = no
hdf5Output = yes
diagnosticsFile = diagnostics.dat
outputTimeInterval = 1.0
# This flag simply loads a state
loadState = no
doExtrapolateXData = yes
#loadGridFileName = simulation_states/equilibrium/cyl/yasp_x10mm_y1mm_mme_n10.dgf
loadGridFileName = simulation_states/equilibrium/cyl/yasp_square10mm.dgf
# This flag tells to continue the history of the last simulation, i.e. existing 
# data files in the output dir are not cleared, new data is simply appended; 
# if false previous history is 'forgotten'
continueSimulation = no
#loadFilename = simulation_states/equilibrium/cyl/yasp_x10mm_y1mm_mme_n10.dat
loadFilename = simulation_states/equilibrium/cyl/yasp_square10mm.dat
saveState = yes
saveFilename = simulation_states/hackepeter/acme2_cyl_par_laplace2.dat
doCheckpointing = no
checkpointInterval = 1.
createGridFile = yes
saveGridFileName = acme2_cyl_par_laplace_equilibrium.dgf
loadChannelStates = no

rootOutputNode = 0
outputRootNodeOnly = yes
printMatrix = no
printRhs = no
printResidual = no
useRowNormPreconditioner = no

#configName = ES
configName = laplace
refineXDirection = no
refineYDirectionGeometrically = yes
# radial cylinder refinement compensates for increasing volumes in y-direction
useRadialCylinderRefinement = no
# Start coordinate of radial refinement
radialCylinderRefinementStart = 15.0e3
# Shall there be an interval of smooth geometric refinement between membrane and
# the beginning of the radial cylinder refinement (radialCylinderRefinementStart)?
transitionIntervalGeometricRefinement = yes
# If not, use nElementsTransitionInterval equidistant elements instead
nElementsTransitionInterval = 20;
# Desired max. ratio between two extracellular cell volumes
max_volume_ratio = 1.e3
# Max. number of points to use in radialCylinderRefinement
max_radial_points = 100
useMembrane = no
numberMembranes = 1
refineMembrane = no
nMembraneElements = 1
mV_output = yes
gammaPot = 1.0
gammaCon = 1.0
# one of {step, squarePulse, trianglePulse, smoothStep}
#initConc = default
adaptiveTimeStep = no
timeStepFile = simulation_states/load_laplace/timesteps_dx10e3.dat
timeStepEvery = 10
#startTime = 5000.63
timeStepLowerLimitNewtonIt = 10
timeStepUpperLimitNewtonIt = 30
newtonReduction = 1e-10
newtonAbsLimit = 1e-1
newtonMaxIt = 50
newtonForceIteration = yes
maxNumberNewtonRestarts = 0
linearSolverMaxIt = 2000
reuseSolution = no
doReorderMatrix = no
# Volume scaling assigns a scaling factor to each DOF, compensating for increasing
# cell volumes algebraically. This is used as a replacement for radial refinement!
doVolumeScaling = yes

cellWidth = 500.
y_memb = 500.
d_memb = 5.
xmax = 10.e6
ymax = 10.e6
ymin = 1.

#dx = 10.e6
dx = 10.e3
dy = 100.e3
dy_cell = 100.
dy_min = 0.5
#n_dy_min = 100

closedCell = yes

# Initialize channels to the current membrane potential
automaticChannelInitialization = yes
# Value to use if no automatic initialization is desired
channelRestingPotential = -65.

# This factor scales the membrane flux. Only used for speedup of equilibration phase!
dummy_value = 10

[boundary]
# This flag controls the interpolation of Dirichlet values in each time step
useTimeDependentBoundaryValues = yes
loadBoundary = bottom
membraneOneSided = no
collapseToLineSource = yes
originalRadius = 505.
boundaryLoadFilename = simulation_states/load_laplace/total_flux_dx10e3.dat

[boundary.concentration]
top = Dirichlet
bottom = Neumann
leftCytosol = Neumann
rightCytosol = Neumann
leftExtracellular = Neumann
rightExtracellular = Neumann

[boundary.potential]
top = Dirichlet
# This is the location of the time-dependent current density source!
bottom = Neumann
leftCytosol = Neumann
rightCytosol = Neumann
leftExtracellular = Neumann
rightExtracellular = Neumann

[equilibration]
doEquilibration = no
# This forces the equilibration calculation, even with more than one element in x-direction
forceEquilibration = no
# time parameters; tEquilibration must be a multiple of dtEquilibrium!
tEquilibrium = 1000.0
dtEquilibrium = 10.0

# leak ratios for resting potential generation; sum must be 1!
#Na_leak = 0.09
#K_leak = 0.91
Na_leak = 0.13
K_leak = 0.87


[stimulation]
stimulation = no
position_x = 150.e3
position_y = 0.
t_inj_start = 20.0
t_inj_end = 3.0e3
# multiply by elementary charge e to get the current in Amps
#I_inj = 1.0e8
I_inj = 1.1e13


# Ion concentrations for the solutions
[solution_in]
# "1" : real concentrations
#Na =  12.
#K =  125.
#Cl = 137.
Na =  0.
K =  0.
Cl = 0.
pot = -65.


[solution_ex]
# In this setup (volume conductor theory), permittivity is actually conductivity in [S/m]
permittivity = 1.3889
#Na = 100.
#K =  4.
#Cl = 104.
Na = 0.
K =  0.
Cl = 0.
pot = 0.


# Channel densities for membrane groups
[membrane]
isActive = no

[membrane.axon]
permittivity = 1.3889
# Units for the conductances are [mS/cm^2]
leak   = 0.5
Nav    = 120.
Kv    =  36.

#[membrane.soma]
#Na-Traub     = 100.
#Ca-Traub     = 1.0
#K(DR)-Traub  = 135.
#K(AHP)-Traub = 0.8
#K(C)-Traub   = 20.
#K(A)-Traub   = 0.5
#HH-K = 10.

#[membrane.apical]
#HH-Na = 0.
#HH-K = 0.

